{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 9,
			"minor" : 0,
			"revision" : 2,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 121.0, 87.0, 681.0, 874.0 ],
		"gridsize" : [ 15.0, 15.0 ],
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-3",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 629.0, 8.0, 35.0, 22.0 ],
					"text" : "in 3 r"
				}

			}
, 			{
				"box" : 				{
					"code" : "// like a moog filter\r\n// https://cycling74.com/forums/zero-delay-feedback-svf-in-gen\r\n\r\n// source by mystran\n// http://www.kvraudio.com/forum/viewtopic.php?t=349859\r\n\r\n//// LICENSE TERMS: Copyright 2012 Teemu Voipio \n// \n// You can use this however you like for pretty much any purpose, \n// as long as you don't claim you wrote it. There is no warranty. \n// \n// Distribution of substantial portions of this code in source form \n// must include this copyright notice and list of conditions. \n// \r\n\r\n\r\ntanhXdX(x) { \n    //return tanh(sqrt(x))/sqrt(x);\n    a = x * x; \n    // IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x) \n    return ((a + 105)*a + 945) / ((15*a + 420)*a + 945); \n}\n\nHistory z1(0), s0(0), s1(0), s2(0), s3(0);\nHistory f(0);\n\n\nif(change(in2)) {\n    f = tan(PI * (in2 * 1/samplerate));\n}\n\nr = (in3 * 40) / 9;\n\n// input with half delay, for non-linearities \nih = 0.5 * (in1 + z1); \nz1 = in1; \n\n// evaluate the non-linear gains \nt0 = tanhXdX(ih - r * s3); \nt1 = tanhXdX(s0); \nt2 = tanhXdX(s1); \nt3 = tanhXdX(s2); \nt4 = tanhXdX(s3); \n\n// g# the denominators for solutions of individual stages \ng0 = 1 / (1 + f*t1);\ng1 = 1 / (1 + f*t2); \ng2 = 1 / (1 + f*t3);\ng3 = 1 / (1 + f*t4); \n\n// f# are just factored out of the feedback solution \nf3 = f*t3*g3;\nf2 = f*t2*g2*f3;\nf1 = f*t1*g1*f2;\nf0 = f*t0*g0*f1; \n\n// solve feedback \ny3 = (g3*s3 + f3*g2*s2 + f2*g1*s1 + f1*g0*s0 + f0*in1) / (1 + r*f0); \n\n// then solve the remaining outputs (with the non-linear gains here) \nxx = t0*(in1 - r*y3); \ny0 = t1*g0*(s0 + f*xx); \ny1 = t2*g1*(s1 + f*y0); \ny2 = t3*g2*(s2 + f*y1); \n\n// update state \ns0 += 2*f * (xx - y0); \ns1 += 2*f * (y0 - y1); \ns2 += 2*f * (y1 - y2); \ns3 += 2*f * (y2 - t4*y3); \n\nout1 = y3;",
					"fontface" : 0,
					"fontname" : "<Monospaced>",
					"fontsize" : 12.0,
					"id" : "obj-5",
					"maxclass" : "codebox",
					"numinlets" : 3,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 11.0, 45.5, 637.0, 781.0 ]
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 11.0, 8.0, 37.0, 22.0 ],
					"text" : "in 1 x"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 320.0, 8.0, 60.0, 22.0 ],
					"text" : "in 2 cutoff"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 11.0, 842.0, 45.0, 22.0 ],
					"text" : "out 1 y"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-5", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-5", 1 ],
					"source" : [ "obj-2", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-5", 2 ],
					"source" : [ "obj-3", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"source" : [ "obj-5", 0 ]
				}

			}
 ],
		"originid" : "pat-57"
	}

}
